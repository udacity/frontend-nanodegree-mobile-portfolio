// Generated by CoffeeScript 1.9.1
(function() {
  var fsUtil, key, pathUtil, safefs, value,
    hasProp = {}.hasOwnProperty;

  fsUtil = require('graceful-fs');

  pathUtil = require('path');

  safefs = {
    openFile: function(fn) {
      console.log('safefs.openFile has been deprecated, we now do the opening and closing automatically through the graceful-fs module');
      fn();
      return safefs;
    },
    closeFile: function() {
      console.log('safefs.closeFile has been deprecated, we now do the opening and closing automatically through the graceful-fs module');
      return safefs;
    },
    getParentPathSync: function(p) {
      var parentPath;
      parentPath = p.replace(/[\/\\]$/, '').replace(/[\/\\][^\/\\]+$/, '');
      return parentPath;
    },
    ensurePath: function(path, options, next) {
      if (next == null) {
        next = options;
        options = null;
      }
      if (options == null) {
        options = {};
      }
      if (options.mode == null) {
        options.mode = null;
      }
      safefs.exists(path, function(exists) {
        var parentPath;
        if (exists) {
          return next(null, true);
        }
        parentPath = safefs.getParentPathSync(path);
        return safefs.ensurePath(parentPath, options, function(err) {
          if (err) {
            return next(err, false);
          }
          return safefs.mkdir(path, options.mode, function(err) {
            return safefs.exists(path, function(exists) {
              if (!exists) {
                err = new Error("Failed to create the directory: " + path);
                return next(err, false);
              }
              return next(null, false);
            });
          });
        });
      });
      return safefs;
    },
    writeFile: function(path, data, options, next) {
      if (next == null) {
        next = options;
        options = null;
      }
      safefs.ensurePath(pathUtil.dirname(path), options, function(err) {
        if (err) {
          return next(err);
        }
        return fsUtil.writeFile(path, data, options, next);
      });
      return safefs;
    },
    appendFile: function(path, data, options, next) {
      if (next == null) {
        next = options;
        options = null;
      }
      safefs.ensurePath(pathUtil.dirname(path), options, function(err) {
        if (err) {
          return next(err);
        }
        return fsUtil.appendFile(path, data, options, next);
      });
      return safefs;
    },
    mkdir: function(path, mode, next) {
      if (next == null) {
        next = mode;
        mode = null;
      }
      if (mode == null) {
        mode = 0x1ff & (~process.umask());
      }
      fsUtil.mkdir(path, mode, next);
      return safefs;
    },
    unlink: function(path, next) {
      safefs.exists(path, function(exists) {
        if (exists === false) {
          return next();
        }
        return fsUtil.unlink(path, next);
      });
      return safefs;
    },
    exists: function(path, next) {
      (fsUtil.exists || pathUtil.exists)(path, next);
      return safefs;
    },
    existsSync: function(path) {
      return (fsUtil.existsSync || pathUtil.existsSync)(path);
    }
  };

  for (key in fsUtil) {
    if (!hasProp.call(fsUtil, key)) continue;
    value = fsUtil[key];
    if ((value != null ? value.bind : void 0) === Function.prototype.bind) {
      if (safefs[key] == null) {
        safefs[key] = value.bind(fsUtil);
      }
    }
  }

  module.exports = safefs;

}).call(this);
